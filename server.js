const express = require('express');
const axios = require('axios');
require('dotenv').config();

const app = express();
app.use(express.json());

// Middleware pour vÃ©rifier la clÃ© API
const openaiHeaders = {
  Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
  'Content-Type': 'application/json',
};

// 1. Infos Marque IA
app.post('/infos-marque', async (req, res) => {
  const { marque } = req.body;
  try {
    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model: 'gpt-4-turbo',
        messages: [
          {
            role: 'system',
            content: "Tu es un expert en histoire et actualitÃ© des marques de luxe.",
          },
          {
            role: 'user',
            content: `Donne-moi une fiche complÃ¨te sur la marque : ${marque}`,
          },
        ],
      },
      { headers: openaiHeaders }
    );
    res.json({ reponse: response.data.choices[0].message.content });
  } catch (error) {
    res.status(500).json({ error: 'Erreur Infos Marque IA' });
  }
});

// 2. StratÃ©gie Marque IA
app.post('/strategie-marque', async (req, res) => {
  const { objectif } = req.body;
  try {
    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model: 'gpt-4-turbo',
        messages: [
          {
            role: 'system',
            content: "Tu es un consultant stratÃ©gie pour marques de mode et luxe.",
          },
          {
            role: 'user',
            content: `Ã‰labore une stratÃ©gie de marque pour : ${objectif}`,
          },
        ],
      },
      { headers: openaiHeaders }
    );
    res.json({ strategie: response.data.choices[0].message.content });
  } catch (error) {
    res.status(500).json({ error: 'Erreur StratÃ©gie Marque IA' });
  }
});

// 3. Fiche Produit IA
app.post('/fiche-produit', async (req, res) => {
  const { nomProduit } = req.body;
  try {
    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model: 'gpt-4-turbo',
        messages: [
          {
            role: 'system',
            content: "Tu es un expert en rÃ©daction de fiches produits pour le luxe.",
          },
          {
            role: 'user',
            content: `RÃ©dige une fiche produit complÃ¨te pour : ${nomProduit}`,
          },
        ],
      },
      { headers: openaiHeaders }
    );
    res.json({ fiche: response.data.choices[0].message.content });
  } catch (error) {
    res.status(500).json({ error: 'Erreur Fiche Produit IA' });
  }
});

// 4. ActualitÃ© du Luxe (avec GPT-4 turbo, pas API news pour lâ€™instant)
app.post('/actualites-luxe', async (req, res) => {
  const { sujet } = req.body;
  try {
    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model: 'gpt-4-turbo',
        messages: [
          {
            role: 'system',
            content: "Tu es un journaliste IA expert dans les tendances et actualitÃ©s du luxe.",
          },
          {
            role: 'user',
            content: `Fais-moi un rÃ©sumÃ© d'actualitÃ© sur : ${sujet}`,
          },
        ],
      },
      { headers: openaiHeaders }
    );
    res.json({ actualites: response.data.choices[0].message.content });
  } catch (error) {
    res.status(500).json({ error: 'Erreur Actus Luxe IA' });
  }
});

// 5. Chat IA Selezione
app.post('/chat', async (req, res) => {
  const { message } = req.body;
  try {
    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model: 'gpt-4-turbo',
        messages: [
          {
            role: 'system',
            content: "Tu es un assistant mode et luxe. Donne des rÃ©ponses complÃ¨tes, utiles et Ã  jour.",
          },
          {
            role: 'user',
            content: message,
          },
        ],
      },
      { headers: openaiHeaders }
    );
    res.json({ reponse: response.data.choices[0].message.content });
  } catch (error) {
    res.status(500).json({ error: 'Erreur Chat IA' });
  }
});

// 6. GÃ©nÃ©rateur d'image
app.post('/generate-image', async (req, res) => {
  const { prompt } = req.body;
  try {
    const response = await axios.post(
      'https://api.openai.com/v1/images/generations',
      {
        model: 'dall-e-3',
        prompt: prompt,
        n: 1,
        size: '1024x1024',
      },
      { headers: openaiHeaders }
    );
    res.json({ image: response.data.data[0].url });
  } catch (error) {
    res.status(500).json({ error: 'Erreur gÃ©nÃ©ration image' });
  }
});

// 7. Guide PrÃªt-Ã -Porter Luxe
app.post('/guide-luxe', async (req, res) => {
  const { theme } = req.body;
  try {
    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model: 'gpt-4-turbo',
        messages: [
          {
            role: 'system',
            content: "Tu es un expert dans le prÃªt-Ã -porter de luxe, outlet et seconde main.",
          },
          {
            role: 'user',
            content: `Explique moi en dÃ©tail : ${theme}`,
          },
        ],
      },
      { headers: openaiHeaders }
    );
    res.json({ guide: response.data.choices[0].message.content });
  } catch (error) {
    res.status(500).json({ error: 'Erreur Guide Luxe' });
  }
});

// 8. Startups & Incubateurs Marques
app.post('/startups-marques', async (req, res) => {
  const { secteur } = req.body;
  try {
    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model: 'gpt-4-turbo',
        messages: [
          {
            role: 'system',
            content: "Tu es un analyste IA des marques Ã©mergentes et startups.",
          },
          {
            role: 'user',
            content: `Fais une liste et analyse de startups dans : ${secteur}`,
          },
        ],
      },
      { headers: openaiHeaders }
    );
    res.json({ startups: response.data.choices[0].message.content });
  } catch (error) {
    res.status(500).json({ error: 'Erreur Startups Marques' });
  }
});

// 9. GÃ©nÃ©rateur de Contenu (posts, articles, prompts visuels, etc.)
app.post('/generateur-contenu', async (req, res) => {
  const { type, sujet } = req.body;
  try {
    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model: 'gpt-4-turbo',
        messages: [
          {
            role: 'system',
            content: `Tu es un crÃ©ateur de contenu IA spÃ©cialisÃ© en luxe.`,
          },
          {
            role: 'user',
            content: `CrÃ©e un ${type} sur : ${sujet}`,
          },
        ],
      },
      { headers: openaiHeaders }
    );
    res.json({ contenu: response.data.choices[0].message.content });
  } catch (error) {
    res.status(500).json({ error: 'Erreur GÃ©nÃ©rateur de contenu IA' });
  }
});

// Test de disponibilitÃ©
app.get('/', (req, res) => {
  res.send('âœ… API Selezione opÃ©rationnelle avec GPT-4 Turbo');
});

// Lancer le serveur
const PORT = process.env.PORT || 10000;
app.listen(PORT, () => console.log(`ðŸš€ Serveur actif sur le port ${PORT}`));
